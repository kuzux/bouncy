#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 2) in vec3 vertexNormal_modelspace;
uniform mat4 M;
uniform mat4 V;
uniform mat4 P;
uniform vec3 LightPositions_worldspace[10];

out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirections_cameraspace[10];

void main(){
    mat4 MVP = P * V * M;
    gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

    Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;
    vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
    for(int i=0; i<10; i++) {
        vec3 LightPosition_cameraspace = ( V * vec4(LightPositions_worldspace[i],1)).xyz;
        LightDirections_cameraspace[i] = LightPosition_cameraspace + EyeDirection_cameraspace;
    }
    Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
}